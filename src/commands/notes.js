const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { userScrapers } = require('../utils/userSessions');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('notes')
        .setDescription('Affiche vos notes √âcole Directe'),
    
    async execute(interaction) {
        const userId = interaction.user.id;
        const scraper = userScrapers.get(userId);

        if (!scraper || !scraper.isLoggedIn) {
            const loginEmbed = new EmbedBuilder()
                .setTitle('üîê Connexion requise')
                .setDescription('Vous devez d\'abord vous connecter avec `/login`')
                .setColor(0xFF9900)
                .addFields({
                    name: 'üìã √âtapes',
                    value: '1. Utilisez `/login`\n2. Saisissez vos identifiants\n3. R√©pondez √† la question de s√©curit√©\n4. R√©essayez `/notes`',
                    inline: false
                })
                .setFooter({ text: '√âcole Directe ‚Ä¢ Non connect√©' });

            return interaction.reply({ embeds: [loginEmbed], ephemeral: true });
        }

        await interaction.deferReply();

        try {
            console.log('üìä R√©cup√©ration des notes via WebScraper...');
            const notes = await scraper.getNotes();

            if (notes && notes.length > 0) {
                // Cr√©er l'embed avec les notes
                const embed = new EmbedBuilder()
                    .setTitle('üìä Vos Notes - √âcole Directe')
                    .setColor(0x0099FF)
                    .setTimestamp();

                // Ajouter les notes r√©centes
                const recentNotes = notes.slice(0, 8);
                const notesText = recentNotes.map((note, index) => 
                    `**${index + 1}.** ${note.matiere || 'Mati√®re'}\nüìù **${note.note}**/${note.sur} - ${note.date || 'Date inconnue'}`
                ).join('\n\n');
                
                embed.setDescription(`**Total :** ${notes.length} notes trouv√©es\n\n${notesText}`);
                embed.setFooter({ text: '√âcole Directe ‚Ä¢ Notes r√©cup√©r√©es par web scraping' });

                await interaction.editReply({ embeds: [embed] });
            } else {
                const errorEmbed = new EmbedBuilder()
                    .setTitle('üìä Aucune note trouv√©e')
                    .setDescription('Aucune note n\'a √©t√© trouv√©e sur votre compte √âcole Directe.')
                    .setColor(0xFFAA00)
                    .addFields({
                        name: 'üí° Suggestions',
                        value: '‚Ä¢ V√©rifiez que des notes sont publi√©es\n‚Ä¢ Reconnectez-vous avec `/login`\n‚Ä¢ Contactez votre √©tablissement',
                        inline: false
                    })
                    .setFooter({ text: '√âcole Directe ‚Ä¢ Aucune donn√©e' });

                await interaction.editReply({ embeds: [errorEmbed] });
            }
        } catch (error) {
            console.error('Erreur r√©cup√©ration notes:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå Erreur lors de la r√©cup√©ration des notes')
                .setDescription(`**Erreur :** ${error.message}`)
                .setColor(0xFF0000)
                .addFields({
                    name: 'üîß D√©tails',
                    value: error.message.includes('WebScraper non initialis√©') ? 
                           'Le navigateur n\'est pas initialis√©. Reconnectez-vous avec `/login`.' :
                           'Erreur technique lors de la r√©cup√©ration des donn√©es.',
                    inline: false
                },
                {
                    name: 'üí° Solutions',
                    value: '‚Ä¢ Reconnectez-vous avec `/login`\n‚Ä¢ V√©rifiez votre connexion\n‚Ä¢ Contactez votre √©tablissement si le probl√®me persiste',
                    inline: false
                })
                .setFooter({ text: '√âcole Directe ‚Ä¢ Erreur web scraping' });

            await interaction.editReply({ embeds: [errorEmbed] });
        }
    },
};

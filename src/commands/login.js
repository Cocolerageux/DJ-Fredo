const { SlashCommandBuilder, EmbedBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, StringSelectMenuBuilder } = require('discord.js');
const EcoleDirecteAPI = require('../api/ecoledirecte');

// Stockage temporaire des sessions utilisateur (en production, utiliser une base de donn√©es)
const userSessions = new Map();

module.exports = {
    data: new SlashCommandBuilder()
        .setName('login')
        .setDescription('Se connecter √† √âcole Directe'),
    
    async execute(interaction) {
        try {
            // Cr√©er le modal pour la connexion
            const modal = new ModalBuilder()
                .setCustomId('loginModal')
                .setTitle('üîê Connexion √âcole Directe');

            // Champ identifiant
            const usernameInput = new TextInputBuilder()
                .setCustomId('username')
                .setLabel('Identifiant')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('Votre identifiant √âcole Directe')
                .setRequired(true);

            // Champ mot de passe
            const passwordInput = new TextInputBuilder()
                .setCustomId('password')
                .setLabel('Mot de passe')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('Votre mot de passe')
                .setRequired(true);

            // Ajouter les champs au modal
            const firstActionRow = new ActionRowBuilder().addComponents(usernameInput);
            const secondActionRow = new ActionRowBuilder().addComponents(passwordInput);

            modal.addComponents(firstActionRow, secondActionRow);

            // Afficher le modal avec gestion d'erreur
            await interaction.showModal(modal);
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'ex√©cution de login:', error);
            
            // Si l'interaction a expir√©, on ne peut plus r√©pondre
            if (error.code === 10062 || error.code === 40060) {
                console.log('‚ö†Ô∏è Interaction expir√©e, impossible de r√©pondre');
                return;
            }
            
            // Pour les autres erreurs, essayer de r√©pondre si possible
            try {
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({
                        content: '‚ùå Une erreur est survenue lors de l\'ouverture du formulaire de connexion.',
                        ephemeral: true
                    });
                }
            } catch (replyError) {
                console.error('‚ùå Impossible de r√©pondre √† l\'interaction:', replyError);
            }
        }
    },

    // Gestion du QCM de s√©curit√©
    async handleQCM(interaction, username, password, qcmData) {
        const userId = interaction.user.id;
        
        // Stocker les donn√©es de connexion temporairement
        userSessions.set(userId, {
            username,
            password,
            tempToken: qcmData.tempToken,
            gtkValue: qcmData.gtkValue,
            timestamp: Date.now()
        });

        // D√©coder la question
        const questionText = Buffer.from(qcmData.question, 'base64').toString('utf-8');
        
        // D√©coder les propositions et cr√©er les options du menu
        const options = qcmData.propositions.map((prop, index) => {
            const value = Buffer.from(prop, 'base64').toString('utf-8');
            return {
                label: value,
                value: prop, // Garder la valeur base64 pour l'envoi
                description: `Option ${index + 1}`
            };
        });

        // Cr√©er le menu de s√©lection
        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('qcmAnswer')
            .setPlaceholder('S√©lectionnez votre r√©ponse')
            .addOptions(options);

        const row = new ActionRowBuilder().addComponents(selectMenu);

        // Cr√©er l'embed pour la question de s√©curit√©
        const embed = new EmbedBuilder()
            .setTitle('üîê Question de s√©curit√© √âcole Directe')
            .setDescription(`**${questionText}**\n\nVeuillez s√©lectionner votre r√©ponse dans le menu ci-dessous pour finaliser votre connexion.`)
            .setColor(0x0099FF)
            .addFields({
                name: 'üõ°Ô∏è S√©curit√©',
                value: 'Cette √©tape est requise par √âcole Directe pour s√©curiser votre connexion.',
                inline: false
            })
            .setFooter({ text: '√âcole Directe ‚Ä¢ Authentification √† deux facteurs' })
            .setTimestamp();

        await interaction.editReply({
            embeds: [embed],
            components: [row]
        });
    },

    // Finaliser la connexion apr√®s r√©ponse QCM
    async finalizeLogin(interaction, selectedAnswer) {
        const userId = interaction.user.id;
        const sessionData = userSessions.get(userId);

        if (!sessionData) {
            return await interaction.editReply({
                content: '‚ùå Session expir√©e. Veuillez relancer la commande `/login`.',
                components: []
            });
        }

        try {
            // Afficher un message de chargement
            const loadingEmbed = new EmbedBuilder()
                .setTitle('‚è≥ Finalisation de la connexion...')
                .setDescription('Validation de votre r√©ponse aupr√®s d\'√âcole Directe...')
                .setColor(0xFFAA00);

            await interaction.editReply({
                embeds: [loadingEmbed],
                components: []
            });

            const api = new EcoleDirecteAPI();
            const result = await api.completeQCMLogin(
                sessionData.username,
                sessionData.password,
                sessionData.tempToken,
                sessionData.gtkValue,
                selectedAnswer
            );

            // Nettoyer la session
            userSessions.delete(userId);

            if (result.success) {
                const successEmbed = new EmbedBuilder()
                    .setTitle('‚úÖ Connexion r√©ussie !')
                    .setDescription(`Bienvenue **${result.account.prenom} ${result.account.nom}** !\n\nVous √™tes maintenant connect√© √† √âcole Directe.`)
                    .setColor(0x00FF00)
                    .addFields(
                        { name: 'üè´ √âtablissement', value: result.account.nomEtablissement || 'Non sp√©cifi√©', inline: true },
                        { name: 'üéì Type de compte', value: result.account.typeCompte || '√âl√®ve', inline: true },
                        { name: 'üì± Fonctionnalit√©s', value: 'Utilisez `/notes`, `/emploi`, `/devoirs`, etc.', inline: false }
                    )
                    .setFooter({ text: '√âcole Directe ‚Ä¢ Connexion active' })
                    .setTimestamp();

                await interaction.editReply({
                    embeds: [successEmbed]
                });
            } else {
                const errorEmbed = new EmbedBuilder()
                    .setTitle('‚ùå Erreur de connexion')
                    .setDescription(`**Erreur :** ${result.error}\n\nVeuillez v√©rifier votre r√©ponse et r√©essayer.`)
                    .setColor(0xFF0000)
                    .addFields({
                        name: 'üí° Que faire ?',
                        value: '‚Ä¢ V√©rifiez que votre r√©ponse est correcte\n‚Ä¢ Relancez `/login` si n√©cessaire\n‚Ä¢ Contactez votre √©tablissement en cas de probl√®me persistant',
                        inline: false
                    })
                    .setFooter({ text: '√âcole Directe ‚Ä¢ √âchec de connexion' });

                await interaction.editReply({
                    embeds: [errorEmbed]
                });
            }
        } catch (error) {
            console.error('Erreur finalisation login:', error);
            
            const crashEmbed = new EmbedBuilder()
                .setTitle('üí• Erreur technique')
                .setDescription('Une erreur est survenue lors de la finalisation de la connexion.')
                .setColor(0xFF0000)
                .addFields({
                    name: 'üîß D√©tails techniques',
                    value: `\`\`\`${error.message}\`\`\``,
                    inline: false
                })
                .setFooter({ text: '√âcole Directe ‚Ä¢ Erreur syst√®me' });

            await interaction.editReply({
                embeds: [crashEmbed],
                components: []
            });
        }
    }
};

// Exporter √©galement la Map pour l'utiliser dans d'autres commandes
module.exports.userSessions = userSessions;
